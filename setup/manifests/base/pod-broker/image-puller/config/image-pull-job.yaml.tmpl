# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: batch/v1
kind: Job
metadata:
  name: "image-pull-{{.NameSuffix}}"
  annotations:
    pod.broker/image-pull: "{{.NodeName}},{{.Image}}"
spec:
  # 1 hour max runtime to pull image.
  activeDeadlineSeconds: 3600
  # Delete job after it hass been complete for 10 minutes.
  ttlSecondsAfterFinished: 600
  completions: 1
  template:
    metadata:
      labels:
        app: image-pull
        app.kubernetes.io/managed-by: pod-broker-image-puller
    spec:
      restartPolicy: OnFailure
      serviceAccountName: pod-broker
      nodeSelector:
        kubernetes.io/hostname: "{{.NodeName}}"
      tolerations:
        - effect: "NoSchedule"
          operator: "Exists"
      volumes:
        ###
        # Local docker socket for pulling images
        ###
        - name: docker
          hostPath:
            path: /var/run/docker.sock
            type: Socket
      containers:
        ###
        # Pull image and then exit
        ###
        - name: image-puller
          image: {{.WorkerImage}}
          command: ["/bin/bash"]
          args:
            - -ec
            - |
              echo "Pulling image: ${IMAGE}"
              mkdir -p ${HOME}/.docker
              echo "${DOCKER_CONFIG_JSON64}" | base64 -d > ${HOME}/.docker/config.json

              # Pull image with progress stats
              image-puller-worker \
                -image ${IMAGE} \
                -stats-port 9100 \
                -exit-delay 60

              if [[ -n "${TAG}" ]]; then
                echo "Tagging image ${IMAGE} with ${TAG}"
                STRIPTAG=${IMAGE//:*/}
                STRIPSHA=${STRIPTAG//@*/}
                docker tag ${IMAGE} ${STRIPSHA}:${TAG}
              fi
          env:
            - name: IMAGE
              value: {{.Image|quote}}
            - name: TAG
              value: {{.Tag|quote}}
            - name: DOCKER_CONFIG_JSON64
              value: {{.DockerConfigJSON64|quote}}
          volumeMounts:
            - name: docker
              mountPath: /var/run/docker.sock
